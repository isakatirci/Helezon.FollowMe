// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace FollowMe.Web.Models
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeGLCEmasModel : IGLCEmasModel
    {
        public System.Data.Entity.DbSet<AddressGuide> AddressGuide { get; set; }
        public System.Data.Entity.DbSet<BankGuide> BankGuide { get; set; }
        public System.Data.Entity.DbSet<Company> Company { get; set; }
        public System.Data.Entity.DbSet<CompanyAddress> CompanyAddress { get; set; }
        public System.Data.Entity.DbSet<CompanyBank> CompanyBank { get; set; }
        public System.Data.Entity.DbSet<CompanyImage> CompanyImage { get; set; }
        public System.Data.Entity.DbSet<CompanyTelephone> CompanyTelephone { get; set; }
        public System.Data.Entity.DbSet<CompanyTerm> CompanyTerm { get; set; }
        public System.Data.Entity.DbSet<Error> Error { get; set; }
        public System.Data.Entity.DbSet<JsonObject> JsonObject { get; set; }
        public System.Data.Entity.DbSet<LogisticsCompany> LogisticsCompany { get; set; }
        public System.Data.Entity.DbSet<Person> Person { get; set; }
        public System.Data.Entity.DbSet<PersonnelAddress> PersonnelAddress { get; set; }
        public System.Data.Entity.DbSet<PersonnelBank> PersonnelBank { get; set; }
        public System.Data.Entity.DbSet<PersonnelEducation> PersonnelEducation { get; set; }
        public System.Data.Entity.DbSet<PersonnelImage> PersonnelImage { get; set; }
        public System.Data.Entity.DbSet<PersonnelTelephone> PersonnelTelephone { get; set; }
        public System.Data.Entity.DbSet<PersonnelTerm> PersonnelTerm { get; set; }
        public System.Data.Entity.DbSet<Sequence> Sequence { get; set; }
        public System.Data.Entity.DbSet<Term> Term { get; set; }
        public System.Data.Entity.DbSet<TermRelationship> TermRelationship { get; set; }
        public System.Data.Entity.DbSet<TermTaxonomy> TermTaxonomy { get; set; }

        public FakeGLCEmasModel()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AddressGuide = new FakeDbSet<AddressGuide>("Id");
            BankGuide = new FakeDbSet<BankGuide>("Id");
            Company = new FakeDbSet<Company>("Id");
            CompanyAddress = new FakeDbSet<CompanyAddress>("Id");
            CompanyBank = new FakeDbSet<CompanyBank>("Id");
            CompanyImage = new FakeDbSet<CompanyImage>("Id");
            CompanyTelephone = new FakeDbSet<CompanyTelephone>("Id");
            CompanyTerm = new FakeDbSet<CompanyTerm>("Id");
            Error = new FakeDbSet<Error>("Id");
            JsonObject = new FakeDbSet<JsonObject>("Id");
            LogisticsCompany = new FakeDbSet<LogisticsCompany>("Id");
            Person = new FakeDbSet<Person>("Id");
            PersonnelAddress = new FakeDbSet<PersonnelAddress>("Id");
            PersonnelBank = new FakeDbSet<PersonnelBank>("Id");
            PersonnelEducation = new FakeDbSet<PersonnelEducation>("Id");
            PersonnelImage = new FakeDbSet<PersonnelImage>("Id");
            PersonnelTelephone = new FakeDbSet<PersonnelTelephone>("Id");
            PersonnelTerm = new FakeDbSet<PersonnelTerm>("Id");
            Sequence = new FakeDbSet<Sequence>("Id");
            Term = new FakeDbSet<Term>("Id");
            TermRelationship = new FakeDbSet<TermRelationship>("Id");
            TermTaxonomy = new FakeDbSet<TermTaxonomy>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
