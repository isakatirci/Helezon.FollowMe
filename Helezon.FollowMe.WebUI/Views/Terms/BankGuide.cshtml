@model IEnumerable<FollowMe.Web.Models.BankGuide>

@{
    ViewBag.Title = "Add New Bank Branch";
    ViewBag.Action = "add new bank branch";
}


<div class="panel panel-primary">
    <div class="panel-heading">
        <h4 class="panel-title">
           Add New Banks
        </h4>
    </div>
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="form-group">
                <label for="inputItemName" class="col-md-3 control-label">Item Name:</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" id="inputItemName" placeholder="Item Name">
                        <span class="input-group-btn">
                            <button id="buttonAddNewItem" class="btn btn-default" type="button">
                                <span class="glyphicon glyphicon-plus"></span>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="panel panel-primary">
    <div class="panel-heading">
        <h4 class="panel-title">
            Add New Bank Branch
        </h4>
    </div>
    <div class="panel-body">
        <form method="post" class="form-horizontal repeater">
            <div class="row">
                <div class="col-md-4 col-md-offset-2">
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.Label("BankNames", "BankNames", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("BankNames", new SelectList(ViewBag.TermNames, "Value", "Text", ViewBag.TermId), optionLabel: "Please Select", htmlAttributes: new { @class = "form-control  select2 ", @onchange = "javascript:getBranches($(this))" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("SwiftNo", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBox("SwiftNo", (string)ViewBag.SwiftNo, htmlAttributes: new { @class = "form-control " })
                                @*@Html.ValidationMessageFor(model => model.SwiftNo, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div data-repeater-list="group-bank">
                @{
                    if (Model != null && Model.Any())
                    {
                        foreach (var bank in Model)
                        {
                            <div data-repeater-item>

                                <div class="row">
                                    <div class="col-md-4 col-md-offset-2">
                                        <div class="form-horizontal">
                                            <div class="form-group">
                                                @Html.Label("BranchName", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.TextBox("BranchName", bank.BranchName, htmlAttributes: new { @class = "form-control " })
                                                    @*@Html.ValidationMessageFor(model => model.BranchName, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-horizontal">
                                            <div class="form-group">
                                                @Html.Label("BranchCode", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.TextBox("BranchCode", bank.BranchCode, htmlAttributes: new { @class = "form-control " })
                                                    @*@Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })*@
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <button class="btn btn-danger" type="button" data-repeater-delete>Delete</button>
                                    </div>
                                </div>
                                <hr />
                            </div>
                        }
                    }
                }
            </div>
            <div class="form-group">
                <div class="col-md-4 col-md-offset-2">
                    <button class="btn btn-default" type="button" data-repeater-create>Add</button>
                    <button class="btn btn-primary" type="submit">Save</button>

                </div>
            </div>
        </form>
    </div>
</div>

@section afterGlobalScripts {

    <script>

        $dropDownListBankNames = $("#BankNames");
        $dropDownListBankNames.change(function () {
            var $BankNames = $("#BankNames").val();
            if ($BankNames.length !== 0) {
                $(location).attr("href", "/Terms/BankGuide?termId=" + $BankNames);
            }

        });

        $("#buttonAddNewItem").click(function () {

            var $BankNames = $("#BankNames").val();
            var $inputItemName = $("#inputItemName").val();

            if ($inputItemName.length !== 0) {

                $(location).attr("href",
                    "/Terms/AddNewBank?termId=" +
                    $BankNames +
                    '&termName=' +
                    $inputItemName);

            }
            else {
                swal("Error!", "Please Enter Bank Name!", "error");
                return;
            }
        });

    </script>


    <script>
        $('.repeater').repeater({
            // (Optional)
            // start with an empty list of repeaters. Set your first (and only)
            // "data-repeater-item" with style="display:none;" and pass the
            // following configuration flag
            initEmpty: false,
            // (Optional)
            // "defaultValues" sets the values of added items.  The keys of
            // defaultValues refer to the value of the input's name attribute.
            // If a default value is not specified for an input, then it will
            // have its value cleared.
            defaultValues: {
                //'text-input': 'foo'
            },
            // (Optional)
            // "show" is called just after an item is added.  The item is hidden
            // at this point.  If a show callback is not given the item will
            // have $(this).show() called on it.
            show: function () {

                $(this).slideDown();
                $(this).find('.mask_phone').inputmask("mask", {
                    "mask": "(999) 999-9999"
                });

                $(this).find(".select2").select2({
                    placeholder: 'Please Select',
                    width: null
                });
            },
            // (Optional)
            // "hide" is called when a user clicks on a data-repeater-delete
            // element.  The item is still visible.  "hide" is passed a function
            // as its first argument which will properly remove the item.
            // "hide" allows for a confirmation step, to send a delete request
            // to the server, etc.  If a hide callback is not given the item
            // will be deleted.
            hide: function (deleteElement) {
                if (confirm('Are you sure you want to delete this element?')) {
                    $(this).slideUp(deleteElement);
                }
            },
            // (Optional)
            // You can use this if you need to manually re-index the list
            // for example if you are using a drag and drop library to reorder
            // list items.
            ready: function (setIndexes) {
                //$dragAndDrop.on('drop', setIndexes);
            },
            // (Optional)
            // Removes the delete button from the first list item,
            // defaults to false.
            isFirstItemUndeletable: false
        })
    </script>

}
