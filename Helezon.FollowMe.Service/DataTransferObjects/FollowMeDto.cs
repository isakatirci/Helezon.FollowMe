

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Helezon.FollowMe.Service\App.config"
//     Connection String Name: "GLCEmasEntities"
//     Connection String:      "Server=mssql.emasglobal.net\MSSQLSERVER2016;Initial Catalog=FollowMe;Persist Security Info=False;User ID=sa;password=**zapped**;;MultipleActiveResultSets=true;Encrypt=True;TrustServerCertificate=true;Connection Timeout=30;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 13.0.1601.5

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Helezon.FollowMe.Service.DataTransferObjects
{

    #region POCO classes

    // AddressGuide
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressGuideDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string Country { get; set; } // Country
        public string SortCountry { get; set; } // SortCountry
        public string Province { get; set; } // Province
        public string District { get; set; } // District
        public string ZipCode { get; set; } // ZipCode
        public string SuburbArea { get; set; } // SuburbArea
        public string Town { get; set; } // Town
        public int? CountryId { get; set; } // CountryId
        public int? Priority { get; set; } // Priority
    }

    // BankGuide
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BankGuideDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public int? TermId { get; set; } // TermId
        public string BankName { get; set; } // BankName (length: 150)
        public string Province { get; set; } // Province (length: 150)
        public string District { get; set; } // District (length: 150)
        public string BranchName { get; set; } // BranchName (length: 150)
        public string BranchCode { get; set; } // BranchCode (length: 150)
        public string SwiftNo { get; set; } // SwiftNo (length: 150)
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyDto
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string ParentId { get; set; } // ParentId (length: 128)
        public int? CompanyRootTypeId { get; set; } // CompanyRootTypeId
        public int Code { get; set; } // Code
        public string Name { get; set; } // Name (length: 256)
        public string Email { get; set; } // Email (length: 500)
        public string CompanyTitle { get; set; } // CompanyTitle (length: 512)
        public string Brand { get; set; } // Brand (length: 500)
        public string TaxNumber { get; set; } // TaxNumber (length: 10)
        public string TaxOffice { get; set; } // TaxOffice (length: 256)
        public string TradeRegisterNumber { get; set; } // TradeRegisterNumber (length: 100)
        public System.DateTime? FoundingDate { get; set; } // FoundingDate
        public bool? IsWebsiteAvailable { get; set; } // IsWebsiteAvailable
        public string Website { get; set; } // Website (length: 500)
        public int? ReasonWhyPassiveId { get; set; } // ReasonWhyPassiveId
        public int? AddressTypeId { get; set; } // AddressTypeId
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Reverse navigation

        /// <summary>
        /// Child CompanyAddress where [CompanyAddress].[CompanyId] point to this entity (FK_CompanyAddress_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyAddressDto> CompanyAddress { get; set; } // CompanyAddress.FK_CompanyAddress_Company
        /// <summary>
        /// Child CompanyBank where [CompanyBank].[CompanyId] point to this entity (FK_CompanyBank_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyBankDto> CompanyBank { get; set; } // CompanyBank.FK_CompanyBank_Company
        /// <summary>
        /// Child CompanyPicture where [CompanyPicture].[CompanyId] point to this entity (FK_CompanyImage_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyPictureDto> CompanyPicture { get; set; } // CompanyPicture.FK_CompanyImage_Company
        /// <summary>
        /// Child CompanyTelephone where [CompanyTelephone].[CompanyId] point to this entity (FK_CompanyTelephone_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyTelephoneDto> CompanyTelephone { get; set; } // CompanyTelephone.FK_CompanyTelephone_Company
        /// <summary>
        /// Child CompanyTerm where [CompanyTerm].[CompanyId] point to this entity (FK_CompanyTerm_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyTermDto> CompanyTerm { get; set; } // CompanyTerm.FK_CompanyTerm_Company
        /// <summary>
        /// Child LogisticsCompany where [LogisticsCompany].[CompanyId] point to this entity (FK_LogisticsCompany_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LogisticsCompanyDto> LogisticsCompany { get; set; } // LogisticsCompany.FK_LogisticsCompany_Company
        /// <summary>
        /// Child Person where [Person].[CompanyId] point to this entity (FK_Person_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonDto> Person { get; set; } // Person.FK_Person_Company
        /// <summary>
        /// Child ZetaCodeNormalIplik where [ZetaCodeNormalIplik].[SirketId] point to this entity (FK_ZetaCodeNormaliplik_Company)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ZetaCodeNormalIplikDto> ZetaCodeNormalIplik { get; set; } // ZetaCodeNormalIplik.FK_ZetaCodeNormaliplik_Company

        public CompanyDto()
        {
            CompanyAddress = new System.Collections.Generic.List<CompanyAddressDto>();
            CompanyBank = new System.Collections.Generic.List<CompanyBankDto>();
            CompanyPicture = new System.Collections.Generic.List<CompanyPictureDto>();
            CompanyTelephone = new System.Collections.Generic.List<CompanyTelephoneDto>();
            CompanyTerm = new System.Collections.Generic.List<CompanyTermDto>();
            LogisticsCompany = new System.Collections.Generic.List<LogisticsCompanyDto>();
            Person = new System.Collections.Generic.List<PersonDto>();
            ZetaCodeNormalIplik = new System.Collections.Generic.List<ZetaCodeNormalIplikDto>();
        }
    }

    // CompanyAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyAddressDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public int? AddressType { get; set; } // AddressType
        public string Province { get; set; } // Province
        public string District { get; set; } // District
        public string Country { get; set; } // Country
        public string Line1 { get; set; } // Line1
        public string Line2 { get; set; } // Line2
        public string ZipCode { get; set; } // ZipCode
        public string SuburbArea { get; set; } // SuburbArea
        public string Town { get; set; } // Town
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [CompanyAddress].([CompanyId]) (FK_CompanyAddress_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_CompanyAddress_Company
    }

    // CompanyBank
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyBankDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string Province { get; set; } // Province (length: 250)
        public string District { get; set; } // District (length: 250)
        public int BankNameTermId { get; set; } // BankNameTermId
        public int CurrencyTypeTermId { get; set; } // CurrencyTypeTermId
        public string BranchCode { get; set; } // BranchCode
        public string BranchName { get; set; } // BranchName
        public string AccountNo { get; set; } // AccountNo
        public string Iban { get; set; } // Iban
        public string SwiftNo { get; set; } // SwiftNo
        public string CurrencyTypeTermName { get; set; } // CurrencyTypeTermName (length: 250)
        public string BankNameTermName { get; set; } // BankNameTermName (length: 250)
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
        public System.DateTime? MakedPassiveOn { get; set; } // MakedPassiveOn
        public string MakedPassiveBy { get; set; } // MakedPassiveBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [CompanyBank].([CompanyId]) (FK_CompanyBank_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_CompanyBank_Company

        public CompanyBankDto()
        {
            BankNameTermId = 0;
            CurrencyTypeTermId = 0;
        }
    }

    // CompanyPicture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyPictureDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string Name { get; set; } // Name (length: 200)
        public string Extension { get; set; } // Extension (length: 50)
        public bool IsFeatured { get; set; } // IsFeatured
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [CompanyPicture].([CompanyId]) (FK_CompanyImage_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_CompanyImage_Company
    }

    // CompanyTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyTelephoneDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public int TelephoneTypeId { get; set; } // TelephoneTypeId
        public string Number { get; set; } // Number (length: 14)
        public string AreaCode { get; set; } // AreaCode
        public string Interphone { get; set; } // Interphone
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [CompanyTelephone].([CompanyId]) (FK_CompanyTelephone_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_CompanyTelephone_Company
    }

    // CompanyTerm
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyTermDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int TermId { get; set; } // TermId
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public int TaxonomyId { get; set; } // TaxonomyId
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [CompanyTerm].([CompanyId]) (FK_CompanyTerm_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_CompanyTerm_Company

        /// <summary>
        /// Parent Term pointed by [CompanyTerm].([TermId]) (FK_CompanyTerm_Term)
        /// </summary>
        public virtual TermDto Term { get; set; } // FK_CompanyTerm_Term
    }

    // Error
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ErrorDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserId { get; set; } // UserId (length: 128)
        public System.DateTime? ErrorDate { get; set; } // ErrorDate
        public string IpAddress { get; set; } // IpAddress (length: 40)
        public string UserAgent { get; set; } // UserAgent
        public string Exception { get; set; } // Exception
        public string Message { get; set; } // Message
        public string Everything { get; set; } // Everything
        public string HttpReferer { get; set; } // HttpReferer (length: 500)
        public string PathAndQuery { get; set; } // PathAndQuery (length: 500)
        public bool IsPassive { get; set; } // IsPassive
    }

    // IplikNo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IplikNoDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int ZetaCodeNormalIplikId { get; set; } // ZetaCodeNormalIplikId
        public string Ne { get; set; } // NE (length: 10)
        public string Nm { get; set; } // NM (length: 10)
        public string Dny { get; set; } // DNY (length: 10)
        public string Fl { get; set; } // FL (length: 10)
        public string Ea { get; set; } // EA (length: 10)
        public string ElyafCinsiKalitesi { get; set; } // ElyafCinsiKalitesi (length: 10)
        public int? ElyafOrani { get; set; } // ElyafOrani
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent ZetaCodeNormalIplik pointed by [IplikNo].([ZetaCodeNormalIplikId]) (FK_IplikNo_ZetaCodeNormaliplik)
        /// </summary>
        public virtual ZetaCodeNormalIplikDto ZetaCodeNormalIplik { get; set; } // FK_IplikNo_ZetaCodeNormaliplik
    }

    // IplikNoGuide
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IplikNoGuideDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string Ne { get; set; } // NE (length: 10)
        public string Nm { get; set; } // NM (length: 10)
        public string Dny { get; set; } // DNY (length: 10)
        public string Fl { get; set; } // FL (length: 10)
        public string Ea { get; set; } // EA (length: 10)
    }

    // JsonObject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class JsonObjectDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string Json { get; set; } // Json
        public int JsonTypeId { get; set; } // JsonTypeId
        public string CompanyId { get; set; } // CompanyId (length: 128)
    }

    // LogisticsCompany
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LogisticsCompanyDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string ImportCode { get; set; } // ImportCode
        public string ExportCode { get; set; } // ExportCode
        public string LogisticsCompanyId { get; set; } // LogisticsCompanyId (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [LogisticsCompany].([CompanyId]) (FK_LogisticsCompany_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_LogisticsCompany_Company

        public LogisticsCompanyDto()
        {
            LogisticsCompanyId = "00000000-0000-0000-0000-000000000000";
        }
    }

    // PantoneRenk
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PantoneRenkDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string PantoneKodu { get; set; } // PantoneKodu (length: 200)
        public string PantoneRengi { get; set; } // PantoneRengi (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child ZetaCodeNormalIplik where [ZetaCodeNormalIplik].[PantoneId] point to this entity (FK_ZetaCodeNormaliplik_PantoneRengi)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ZetaCodeNormalIplikDto> ZetaCodeNormalIplik { get; set; } // ZetaCodeNormalIplik.FK_ZetaCodeNormaliplik_PantoneRengi

        public PantoneRenkDto()
        {
            ZetaCodeNormalIplik = new System.Collections.Generic.List<ZetaCodeNormalIplikDto>();
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonDto
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string FirstName { get; set; } // FirstName (length: 64)
        public string LastName { get; set; } // LastName (length: 64)
        public string Tckn { get; set; } // Tckn (length: 11)
        public string Email { get; set; } // Email (length: 256)
        public string PersonnelEmail { get; set; } // PersonnelEmail (length: 500)
        public string Birthplace { get; set; } // Birthplace (length: 150)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 256)
        public System.DateTime? BirthDay { get; set; } // BirthDay
        public bool IsAuthorized { get; set; } // IsAuthorized
        public int GenderTypeId { get; set; } // GenderTypeId
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
        public string DriversLicenseNo { get; set; } // DriversLicenseNo (length: 500)
        public string PassportNo { get; set; } // PassportNo (length: 500)
        public string ForeignIdentityNo { get; set; } // ForeignIdentityNo (length: 500)
        public int? RelationshipStatusId { get; set; } // RelationshipStatusId
        public int? ReligionId { get; set; } // ReligionId
        public int? BloodGroupId { get; set; } // BloodGroupId
        public int? EducationLevelId { get; set; } // EducationLevelId
        public string NameDay { get; set; } // NameDay (length: 32)
        public string Interphone { get; set; } // Interphone (length: 32)
        public int? ReasonWhyPassiveId { get; set; } // ReasonWhyPassiveId
        public int? PositionId { get; set; } // PositionId

        // Reverse navigation

        /// <summary>
        /// Child PersonnelAddress where [PersonnelAddress].[PersonnelId] point to this entity (FK_PersonnelAddress_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelAddressDto> PersonnelAddress { get; set; } // PersonnelAddress.FK_PersonnelAddress_Person
        /// <summary>
        /// Child PersonnelBank where [PersonnelBank].[PersonnelId] point to this entity (FK_PersonnelBank_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelBankDto> PersonnelBank { get; set; } // PersonnelBank.FK_PersonnelBank_Person
        /// <summary>
        /// Child PersonnelEducation where [PersonnelEducation].[PersonnelId] point to this entity (FK_PersonnelEducation_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelEducationDto> PersonnelEducation { get; set; } // PersonnelEducation.FK_PersonnelEducation_Person
        /// <summary>
        /// Child PersonnelPicture where [PersonnelPicture].[PersonnelId] point to this entity (FK_PersonnelImage_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelPictureDto> PersonnelPicture { get; set; } // PersonnelPicture.FK_PersonnelImage_Person
        /// <summary>
        /// Child PersonnelTelephone where [PersonnelTelephone].[PersonnelId] point to this entity (FK_PersonnelTelephone_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelTelephoneDto> PersonnelTelephone { get; set; } // PersonnelTelephone.FK_PersonnelTelephone_Person
        /// <summary>
        /// Child PersonnelTerm where [PersonnelTerm].[PersonnelId] point to this entity (FK_PersonnelTerm_Person)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelTermDto> PersonnelTerm { get; set; } // PersonnelTerm.FK_PersonnelTerm_Person

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [Person].([CompanyId]) (FK_Person_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_Person_Company

        public PersonDto()
        {
            IsAuthorized = false;
            GenderTypeId = 0;
            PersonnelAddress = new System.Collections.Generic.List<PersonnelAddressDto>();
            PersonnelBank = new System.Collections.Generic.List<PersonnelBankDto>();
            PersonnelEducation = new System.Collections.Generic.List<PersonnelEducationDto>();
            PersonnelPicture = new System.Collections.Generic.List<PersonnelPictureDto>();
            PersonnelTelephone = new System.Collections.Generic.List<PersonnelTelephoneDto>();
            PersonnelTerm = new System.Collections.Generic.List<PersonnelTermDto>();
        }
    }

    // PersonnelAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelAddressDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public int? AddressType { get; set; } // AddressType
        public string Province { get; set; } // Province (length: 500)
        public string District { get; set; } // District (length: 500)
        public string Country { get; set; } // Country (length: 500)
        public string Line1 { get; set; } // Line1 (length: 500)
        public string Line2 { get; set; } // Line2 (length: 500)
        public string ZipCode { get; set; } // ZipCode (length: 500)
        public string SuburbArea { get; set; } // SuburbArea (length: 500)
        public string Town { get; set; } // Town (length: 500)
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelAddress].([PersonnelId]) (FK_PersonnelAddress_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelAddress_Person
    }

    // PersonnelBank
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelBankDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string Province { get; set; } // Province (length: 250)
        public string District { get; set; } // District (length: 250)
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public int BankNameTermId { get; set; } // BankNameTermId
        public int CurrencyTypeTermId { get; set; } // CurrencyTypeTermId
        public string BranchCode { get; set; } // BranchCode
        public string BranchName { get; set; } // BranchName
        public string AccountNo { get; set; } // AccountNo
        public string Iban { get; set; } // Iban
        public string SwiftNo { get; set; } // SwiftNo
        public string CurrencyTypeTermName { get; set; } // CurrencyTypeTermName (length: 250)
        public string BankNameTermName { get; set; } // BankNameTermName (length: 250)
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelBank].([PersonnelId]) (FK_PersonnelBank_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelBank_Person

        public PersonnelBankDto()
        {
            BankNameTermId = 0;
            CurrencyTypeTermId = 0;
        }
    }

    // PersonnelEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelEducationDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public string StudiedSchoolName { get; set; } // StudiedSchoolName (length: 500)
        public int? EducationLevelId { get; set; } // EducationLevelId
        public string EducationArea { get; set; } // EducationArea (length: 500)
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
        public System.DateTime? MakedPassiveOn { get; set; } // MakedPassiveOn
        public string MakedPassiveBy { get; set; } // MakedPassiveBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelEducation].([PersonnelId]) (FK_PersonnelEducation_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelEducation_Person

        public PersonnelEducationDto()
        {
            StudiedSchoolName = "0";
        }
    }

    // PersonnelPicture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelPictureDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public string Extension { get; set; } // Extension (length: 50)
        public bool IsFeatured { get; set; } // IsFeatured
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelPicture].([PersonnelId]) (FK_PersonnelImage_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelImage_Person
    }

    // PersonnelTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelTelephoneDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public int TelephoneTypeId { get; set; } // TelephoneTypeId
        public string Number { get; set; } // Number (length: 14)
        public string AreaCode { get; set; } // AreaCode (length: 128)
        public string Interphone { get; set; } // Interphone (length: 128)
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelTelephone].([PersonnelId]) (FK_PersonnelTelephone_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelTelephone_Person
    }

    // PersonnelTerm
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonnelTermDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int TaxonomyId { get; set; } // TaxonomyId
        public int Name { get; set; } // Name
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string PersonnelId { get; set; } // PersonnelId (length: 128)
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonnelTerm].([PersonnelId]) (FK_PersonnelTerm_Person)
        /// </summary>
        public virtual PersonDto Person { get; set; } // FK_PersonnelTerm_Person

        /// <summary>
        /// Parent Term pointed by [PersonnelTerm].([Name]) (FK_PersonnelTerm_Term)
        /// </summary>
        public virtual TermDto Term { get; set; } // FK_PersonnelTerm_Term
    }

    // RafBilgisi
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RafBilgisiDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int? DilId { get; set; } // DilId
        public string RafBilgisi_ { get; set; } // RafBilgisi (length: 100)
    }

    // Renk
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RenkDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string HtmlKod { get; set; } // HtmlKod (length: 50)
        public int DilId { get; set; } // DilId
        public string Ad { get; set; } // Ad (length: 50)
        public string IplikRenkKodu { get; set; } // IplikRenkKodu (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child ZetaCodeNormalIplik where [ZetaCodeNormalIplik].[Renkid] point to this entity (FK_ZetaCodeNormaliplik_Renk)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ZetaCodeNormalIplikDto> ZetaCodeNormalIplik { get; set; } // ZetaCodeNormalIplik.FK_ZetaCodeNormaliplik_Renk

        public RenkDto()
        {
            ZetaCodeNormalIplik = new System.Collections.Generic.List<ZetaCodeNormalIplikDto>();
        }
    }

    // SequenceBlueSiparisNo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SequenceBlueSiparisNoDto
    {
        public int Id { get; set; } // Id (Primary key)
        public string BlueCompanyId { get; set; } // BlueCompanyId (length: 128)
        public int SiparisNo { get; set; } // SiparisNo
        public System.DateTime CreatedOn { get; set; } // CreatedOn
        public string Description { get; set; } // Description (length: 250)
    }

    // Term
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int TaxonomyId { get; set; } // TaxonomyId
        public string Name { get; set; } // Name (length: 200)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string Color { get; set; } // Color
        public bool NoChildrenClass { get; set; } // NoChildrenClass
        public bool NoDragClass { get; set; } // NoDragClass
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
        public bool? Disabled { get; set; } // Disabled

        // Reverse navigation

        /// <summary>
        /// Child CompanyTerm where [CompanyTerm].[TermId] point to this entity (FK_CompanyTerm_Term)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompanyTermDto> CompanyTerm { get; set; } // CompanyTerm.FK_CompanyTerm_Term
        /// <summary>
        /// Child PersonnelTerm where [PersonnelTerm].[Name] point to this entity (FK_PersonnelTerm_Term)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PersonnelTermDto> PersonnelTerm { get; set; } // PersonnelTerm.FK_PersonnelTerm_Term

        public TermDto()
        {
            NoChildrenClass = false;
            NoDragClass = false;
            CompanyTerm = new System.Collections.Generic.List<CompanyTermDto>();
            PersonnelTerm = new System.Collections.Generic.List<PersonnelTermDto>();
        }
    }

    // TermRelationship
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermRelationshipDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int TermId { get; set; } // TermId
        public int TaxonomyId { get; set; } // TaxonomyId
        public string EntityId { get; set; } // EntityId (length: 128)
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
    }

    // TermTaxonomy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermTaxonomyDto
    {
        public int Id { get; set; } // Id (Primary key)
        public int? TermId { get; set; } // TermId
        public int TaxonomyId { get; set; } // TaxonomyId
        public string CompanyId { get; set; } // CompanyId (length: 128)
        public string Description { get; set; } // Description (length: 400)
        public int? Parent { get; set; } // Parent
        public bool? IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)
    }

    // ZetaCodeFanteziIplik
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ZetaCodeFanteziIplikDto
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // ZetaCodeNormalIplik
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ZetaCodeNormalIplikDto
    {
        public int Id { get; set; } // Id (Primary key)
        public bool Master { get; set; } // Master
        public int? ZetaCode { get; set; } // ZetaCode
        public string ZetaCodePrevious { get; set; } // ZetaCodePrevious (length: 200)
        public string IplikKategosiId { get; set; } // IplikKategosiId (length: 200)
        public string SirketId { get; set; } // SirketId (length: 128)
        public string Ulke { get; set; } // Ulke (length: 200)
        public string BlueUrunKodIsmi { get; set; } // BlueUrunKodIsmi (length: 200)
        public int BlueKod { get; set; } // BlueKod
        public int BlueSiparisNo { get; set; } // BlueSiparisNo
        public int? UretimTeknolojisiId { get; set; } // UretimTeknolojisiId
        public int? PantoneId { get; set; } // PantoneId
        public int? Renkid { get; set; } // Renkid
        public int? RafyeriTurkiyeId { get; set; } // RafyeriTurkiyeId
        public int? RafyeriYunanistanId { get; set; } // RafyeriYunanistanId
        public bool IsPassive { get; set; } // IsPassive
        public System.DateTime? CreatedOn { get; set; } // CreatedOn
        public string CreatedBy { get; set; } // CreatedBy (length: 128)
        public System.DateTime? ChangedOn { get; set; } // ChangedOn
        public string ChangedBy { get; set; } // ChangedBy (length: 128)

        // Reverse navigation

        /// <summary>
        /// Child IplikNo where [IplikNo].[ZetaCodeNormalIplikId] point to this entity (FK_IplikNo_ZetaCodeNormaliplik)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<IplikNoDto> IplikNo { get; set; } // IplikNo.FK_IplikNo_ZetaCodeNormaliplik

        // Foreign keys

        /// <summary>
        /// Parent Company pointed by [ZetaCodeNormalIplik].([SirketId]) (FK_ZetaCodeNormaliplik_Company)
        /// </summary>
        public virtual CompanyDto Company { get; set; } // FK_ZetaCodeNormaliplik_Company

        /// <summary>
        /// Parent PantoneRenk pointed by [ZetaCodeNormalIplik].([PantoneId]) (FK_ZetaCodeNormaliplik_PantoneRengi)
        /// </summary>
        public virtual PantoneRenkDto PantoneRenk { get; set; } // FK_ZetaCodeNormaliplik_PantoneRengi

        /// <summary>
        /// Parent Renk pointed by [ZetaCodeNormalIplik].([Renkid]) (FK_ZetaCodeNormaliplik_Renk)
        /// </summary>
        public virtual RenkDto Renk { get; set; } // FK_ZetaCodeNormaliplik_Renk

        public ZetaCodeNormalIplikDto()
        {
            IplikNo = new System.Collections.Generic.List<IplikNoDto>();
        }
    }

    #endregion

}
// </auto-generated>

